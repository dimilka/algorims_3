graph = {'Австрия': {'Словения': 278, 'Лихтенштейн': 526, 'Германия': 524, 'Чехия': 251, 'Швейцария': 683, 'Италия': 766, 'Венгрия': 216, 'Словакия': 55},
         'Албания': {'Греция': 501, 'Северная Македония': 153, 'Черногория': 131, 'Сербия': 392},
         'Андорра': {'Франция': 709, 'Испания': 491},
         'Белоруссия': {'Украина': 434, 'Россия': 677, 'Литва': 169, 'Латвия': 403, 'Польша': 295},
         'Бельгия': {'Нидерланды': 174, 'Германия': 650, 'Люксембург': 187, 'Франция': 264},
         'Болгария': {'Греция': 525, 'Северная Македония': 174, 'Сербия': 330, 'Румыния': 296},
         'Босния и Герцеговина': {'Хорватия': 381, 'Черногория': 172, 'Сербия': 194},
         'Ватикан': {'Италия': 2},
         'Венгрия': {'Сербия': 317, 'Словакия': 163, 'Румыния': 643, 'Украина': 899, 'Австрия': 216, 'Словения': 381, 'Хорватия': 300},
         'Германия': {'Нидерланды': 573, 'Бельгия': 650, 'Люксембург': 600, 'Франция': 876, 'Швейцария': 752, 'Австрия': 524, 'Чехия': 280, 'Дания': 357,'Польша': 518},
         'Греция': {'Албания': 501, 'Северная Македония': 487, 'Болгария': 525},
         'Дания': {'Германия': 357},
         'Испания': {'Франция': 1053, 'Андорра': 491, 'Португалия': 502},
         'Италия': {'Ватикан': 2, 'Сан-Марино': 227, 'Франция': 1106, 'Швейцария': 684, 'Австрия': 766, 'Словения': 489},
         'Латвия': {'Белоруссия': 403, 'Эстония': 279, 'Литва': 262, 'Россия': 842},
         'Литва': {'Белоруссия': 169, 'Польша': 393, 'Латвия': 262, 'Россия': 787},
         'Лихтенштейн': {'Австрия': 526, 'Швейцария': 158},
         'Люксембург': {'Бельгия': 187, 'Франция': 287, 'Германия': 600},
         'Молдавия': {'Румыния': 357, 'Украина': 397},
         'Монако': {'Франция': 464},
         'Нидерланды': {'Германия': 573, 'Бельгия': 174},
         'Норвегия': {'Швеция': 417, 'Финляндия': 788, 'Россия': 1022},
         'Польша': {'Германия': 518, 'Чехия': 517, 'Словакия': 532, 'Украина': 690, 'Белоруссия': 295, 'Литва': 393, 'Россия': 1149},
         'Португалия': {'Испания': 502},
         'Россия': {'Украина': 756, 'Белоруссия': 677, 'Эстония': 867, 'Польша': 1149, 'Латвия': 842, 'Норвегия': 1022, 'Финляндия': 892, 'Литва': 787},
         'Румыния': {'Болгария': 296, 'Молдавия': 357, 'Сербия': 449, 'Венгрия': 643, 'Украина': 744},
         'Сан-Марино': {'Италия': 227},
         'Северная Македония': {'Греция': 487, 'Болгария': 174, 'Сербия': 324, 'Албания': 153},
         'Сербия': {'Северная Македония': 324, 'Албания': 392, 'Черногория': 279, 'Болгария': 330, 'Босния и Герцеговина': 194, 'Хорватия': 367, 'Венгрия': 317, 'Румыния': 449},
         'Словакия': {'Украина': 1004, 'Венгрия': 163, 'Австрия': 55, 'Чехия': 288, 'Польша': 532},
         'Словения': {'Италия': 489, 'Австрия': 278, 'Венгрия': 381, 'Хорватия': 117},
         'Украина': {'Молдавия': 397, 'Румыния': 744, 'Словакия': 1004, 'Венгрия': 899, 'Белоруссия': 434, 'Россия': 756, 'Польша': 690},
         'Финляндия': {'Швеция': 396, 'Норвегия': 788, 'Россия': 892},
         'Франция': {'Монако': 464, 'Андорра': 709, 'Италия': 1106, 'Швейцария': 435, 'Бельгия': 264, 'Люксембург': 287, 'Германия': 876, 'Испания': 1053},
         'Хорватия': {'Черногория': 455, 'Словения': 117, 'Сербия': 367, 'Венгрия': 300, 'Босния и Герцеговина': 381},
         'Черногория': {'Хорватия': 455, 'Албания': 131, 'Босния и Герцеговина': 172, 'Сербия': 279},
         'Чехия': {'Словакия': 288, 'Австрия': 251, 'Германия': 280, 'Польша': 517},
         'Швейцария': {'Австрия': 683, 'Лихтенштейн': 158, 'Германия': 752, 'Италия': 684, 'Франция': 435},
         'Швеция': {'Финляндия': 396, 'Норвегия': 417},
         'Эстония': {'Россия': 867, 'Латвия': 279}
         }


def find_lowest_cost_node(costs):
    global processed
    lowest_cost = float("inf")
    lowest_cost_node = None
    for node in costs:
        cost = costs[node]
        if (cost < lowest_cost) and (node not in processed):
            lowest_cost = cost
            lowest_cost_node = node
    return lowest_cost_node


end = input("Введите название страны для старта ")
start = input("Введите название страны для финиша ")
costs = {}
parents = {}
processed = [start]

for name in graph:
    if name == start:
        costs[name] = float("inf")
        for j in graph[name]:
            costs[j] = graph[name][j]
            parents[j] = start
    elif name not in graph[start]:
        costs[name] = float("inf")
        parents[name] = None

node = find_lowest_cost_node(costs)
while (node is not None) and (node != end):
    cost = costs[node]
    neighbors = graph[node]
    for n in neighbors.keys():
        new_cost = cost + neighbors[n]
        if costs[n] > new_cost:
            costs[n] = new_cost
            parents[n] = node
    processed.append(node)
    node = find_lowest_cost_node(costs)


parent = end
print(f"{end}", end='')
total = 0
while parent != start:
    new_parent = parents[parent]
    print(f" - {graph[parent][new_parent]} - {new_parent}", end='')
    total += graph[parent][new_parent]
    parent = new_parent
print(f"\nВся длина пути: {total} км")